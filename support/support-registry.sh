#!/bin/bash
#===============================================================
#Script Name: support-registry.sh
#Date: 10/03/2025
#Created By: T03KNEE
#Github: https://github.com/To3Knee/Salt-Shaker
#Version: 2.0
#Short: Build index/FAQ/manifest and validate headers
#About: Scans support/*.sh, validates header format, emits:
#  - support/INDEX.md
#  - support/faq-support.txt
#  - support/.support-manifest.csv
# Exits non-zero if any script fails validation (use --no-validate to skip).
#===============================================================

set -euo pipefail
LC_ALL=C

# ---- CLI ---------------------------------------------------------------------
VALIDATE=1
case "${1:-}" in
  --no-validate) VALIDATE=0 ;;
  -h|--help)
    cat <<'HLP'
Usage: support/support-registry.sh [--no-validate]
  --no-validate   Generate index/faq/csv but do not fail on header errors
HLP
    exit 0;;
  "" ) : ;;
  * ) echo "Unknown arg: $1" >&2; exit 2;;
esac

# ---- Paths -------------------------------------------------------------------
ROOT="${SALT_SHAKER_ROOT:-$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")/.." && pwd)}"
SUP="$ROOT/support"
OUT_MD="$SUP/INDEX.md"
OUT_FAQ="$SUP/faq-support.txt"
OUT_CSV="$SUP/.support-manifest.csv"

mkdir -p "$SUP"

# ---- Helpers -----------------------------------------------------------------
fmt_mtime() { date -r "$1" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || stat -c '%y' "$1" 2>/dev/null || echo "n/a"; }
size_of()  { stat -c '%s' "$1" 2>/dev/null || wc -c <"$1" 2>/dev/null || echo 0; }
sha()      { sha256sum "$1" 2>/dev/null | awk '{print $1}'; }

# Header validation according to project standard
validate_header() {
  # $1=file  -> prints "" if OK, else error lines separated by \n
  local f="$1" err=""
  # must start with shebang
  head -n1 "$f" | grep -q '^#!/bin/bash$' || err+=$'missing shebang "#!/bin/bash"\n'
  # required markers (not strict count of '=')
  grep -q '^#===============================================================' "$f" || err+=$'missing separator line\n'
  # Required fields (first block)
  local script_name date created github version short about
  script_name="$(grep -m1 '^#Script Name:' "$f" | sed 's/^#Script Name:[[:space:]]*//')"
  date="$(grep -m1 '^#Date:' "$f" | sed 's/^#Date:[[:space:]]*//')"
  created="$(grep -m1 '^#Created By:' "$f" | sed 's/^#Created By:[[:space:]]*//')"
  github="$(grep -m1 '^#Github:' "$f" | sed 's/^#Github:[[:space:]]*//')"
  version="$(grep -m1 '^#Version:' "$f" | sed 's/^#Version:[[:space:]]*//')"
  short="$(grep -m1 '^#Short:' "$f" | sed 's/^#Short:[[:space:]]*//')"
  about="$(grep -m1 '^#About:' "$f" | sed 's/^#About:[[:space:]]*//')"

  [ -n "$script_name" ] || err+=$'missing "Script Name"\n'
  [ -n "$date" ]       || err+=$'missing "Date"\n'
  [ -n "$created" ]    || err+=$'missing "Created By"\n'
  [ -n "$github" ]     || err+=$'missing "Github"\n'
  [ -n "$version" ]    || err+=$'missing "Version"\n'
  [ -n "$short" ]      || err+=$'missing "Short"\n'
  [ -n "$about" ]      || err+=$'missing "About"\n'

  # Field-specific checks
  # Date: MM/DD/YYYY (2025 allowed)
  if [ -n "$date" ] && ! echo "$date" | grep -Eq '^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/20[0-9]{2}$'; then
    err+=$'invalid Date format (expected MM/DD/YYYY)\n'
  fi
  # Short: <= 40 chars
  if [ -n "$short" ]; then
    local len="${#short}"
    [ "$len" -le 40 ] || err+=$'Short exceeds 40 chars (menu constraint)\n'
  fi
  # Github: looks like a URL
  if [ -n "$github" ] && ! echo "$github" | grep -Eq '^https?://'; then
    err+=$'Github must be a URL\n'
  fi
  # Version: simple semver-ish
  if [ -n "$version" ] && ! echo "$version" | grep -Eq '^[0-9]+(\.[0-9]+)*$'; then
    err+=$'Version must be numeric (e.g., 1.0 or 1.2.3)\n'
  fi

  # Return errors
  if [ -n "$err" ]; then
    printf '%s' "$err"
  fi
}

# ---- Initialize outputs ------------------------------------------------------
echo "file,executable,bytes,mtime,sha256,short,about" > "$OUT_CSV"

cat > "$OUT_MD" <<'MD'
# Salt-Shaker Support Tools Index

Generated by `support/support-registry.sh`.

| File | Exec | Size | Modified | SHA256 | Short | About |
|---|:---:|---:|---|---|---|---|
MD

cat > "$OUT_FAQ" <<'FAQ'
──────────────────────────────────────────────────────────────
Salt-Shaker Support Tools – FAQ
Generated by support/support-registry.sh
──────────────────────────────────────────────────────────────
FAQ

# ---- Scan & validate ---------------------------------------------------------
shopt -s nullglob
FAIL=0
printf '%-28s | %-6s | %-40s\n' "FILE" "EXEC" "VALIDATION"
printf '%s\n' "----------------------------+--------+------------------------------------------"

for f in "$SUP"/*.sh; do
  [ -f "$f" ] || continue
  base="$(basename "$f")"
  exec_bit="no"; [ -x "$f" ] && exec_bit="yes"
  bytes="$(size_of "$f")"
  mtime="$(fmt_mtime "$f")"
  sum="$(sha "$f")"

  short="$(awk -F': ' '/^#Short:/ {print substr($0,index($0,$2)) ; exit}' "$f")"
  about="$(awk -F': ' '/^#About:/ {print substr($0,index($0,$2)) ; exit}' "$f")"
  [ -z "$short" ] && short="(no short description)"
  [ -z "$about" ] && about="(no about text)"

  # Validate header
  vout="$(validate_header "$f" || true)"
  if [ -n "$vout" ] && [ $VALIDATE -eq 1 ]; then
    status="FAIL"
    FAIL=1
  else
    status="OK"
  fi
  printf '%-28s | %-6s | %-40s\n' "$base" "${exec_bit^^}" "$status"

  # CSV (escape quotes)
  esc_short="${short//\"/\"\"}"
  esc_about="${about//\"/\"\"}"
  echo "\"$base\",\"$exec_bit\",\"$bytes\",\"$mtime\",\"$sum\",\"$esc_short\",\"$esc_about\"" >> "$OUT_CSV"

  # MD row
  echo "| $base | ${exec_bit^^} | $bytes | $mtime | \`$sum\` | $short | $about |" >> "$OUT_MD"

  # FAQ entry
  {
    echo
    echo "• $base"
    echo "  Short : $short"
    echo "  About : $about"
    echo "  Exec  : $exec_bit"
    echo "  Size  : $bytes"
    echo "  MTime : $mtime"
  } >> "$OUT_FAQ"

  # If failing, append reasons at bottom (not to spam the table)
  if [ "$status" = "FAIL" ]; then
    {
      echo
      echo "===== Header issues: $base ====="
      echo "$vout"
    } >> "$OUT_FAQ"
  fi
done

echo
echo "Wrote:"
echo "  $OUT_MD"
echo "  $OUT_FAQ"
echo "  $OUT_CSV"

if [ $FAIL -eq 1 ] && [ $VALIDATE -eq 1 ]; then
  echo
  echo "✖ One or more support scripts failed header validation."
  echo "  See $OUT_FAQ for details."
  exit 2
fi

echo "✔ Registry complete."
exit 0
